var http = require('http'); // importing http module. it's a node's default module.
var fs = require('fs');	// importing filesystem module. using fs to read riobus-config.json.

// Access riobus-config.json
var config = JSON.parse(fs.readFileSync(__dirname + "/riobus-config.json")).dataQueuer;


// Options to do the GET Request
var options = {
	host: config.host,
	path: config.path,
	port: config.port,
	method: "GET"
};

// Global variable to store json
var data = null;
// Interval between requests for riob.us/all
var intervalTime = config.intervalTime;

// Callback function to GET Request to riob.us/all
function callback(response) {
  var str = '';

  // another chunk of data has been recieved, so append it to `str`
  response.on('data', function (chunk) {
    str += chunk.toString('utf-8');
  });

  // the whole response has been recieved, so we just parse it to JSON
  response.on('end', function () {
    console.log("GET request for riob.us/all done.");
    data = JSON.parse(str);
  });
}

// Queue the requested data into queue.json
function appendDataAsync(data_to_append) {
  fs.appendFile('queue.json', data_to_append, function (err) {
  	if (err) throw err;
	});
}

// Parses the data to insert into bigquery
function data_formatter() {
	var formatted_data = "";
	var bus_array = data.DATA;
	for(var i = 0; i < bus_array.length; i++) {
		if(bus_array[i][6] == "") {
			bus_array[i][6] = NaN; // avoid leaving DIRECAO as ""
		}
		formatted_data += '{"DATAHORA": "' + bus_array[i][0] + '", "ORDEM": "' + bus_array[i][1] + '", "LINHA": "' + bus_array[i][2] + '", "LATITUDE": ' + bus_array[i][3] + ', "LONGITUDE": ' + bus_array[i][4] + ', "VELOCIDADE": ' + bus_array[i][5] + ', "DIRECAO":' + bus_array[i][6] + ', "LASTUPDATE": "' + data.LASTUPDATE + '"}\n';
	}

	return formatted_data;
}

// Grabs data from riob.us/all and enqueues it in the json file in time intervals
setInterval(function() {
	// Make GET Request
	http.request(options, callback).end();
	
	// Checks if data already has been generated by JSON.parse.
	if(data != null) {
		var formatted_data = data_formatter();
		appendDataAsync(formatted_data);
	}
}, intervalTime);